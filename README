									CSE-506 OPERATING SYSTEMS ASSIGNMENT 2
										  ANTI VIRUS FILE SYSTEMS
											MOHIT GOYAL(110349552)
											  NOVEMBER 8, 2015

INTRODUCTION:
		AMFS is stackable anti virus file system. By stackable it means that
		it acts as interface between VFS and lower file systems and checks
		files for virus patterns while various file operation like read, write,
		open, close, lookup, revalidate, readdir, filldir, etc.. And if it find
		any malacious pattern it marks file bad and return without further operation.

SYNTAX:
		For user program to list, add, and remove patterns, Syntax is
		For list:			./amfsctl -l mnt_pt

		For add:			./xcipher -a "pattern" mnt_pt

		For remove:			./xcipher -r "pattern" mnt_pt

		For amfs file system, it can be checked by system commands like
		cp, rm, cat, echo, ls, etc.

BUILD AND MOUNT:
		1. I have put the kernel.config file in fs/amfs/ which will be used
			to build the kernel.

		2. The amfs file system source code is at path fs/amfs/ which will be
			build as module while compiling kernel.
			Following steps should be followed to mount it:
			# make
			# insmod amfs.ko
			# mount -t amfs -o pattdb=/pattern_path mount_dir mount_point

			For convenience I have written a script "amfs.sh" which is at
			path hw2-mgoyal/ which can be directly used to build, insert and
			mount amfs module.
			If you want to use this please make path changes accordingly.
			By default I have given path as per my directory structure:

			mount point: /usr/src/hw2-mgoyal/mnt/amfs
			mount dir: /usr/src/hw2-mgoyal/usr/src/amfs
			pattern db: pattdb=/usr/src/hw2-mgoyal/pattern/patterns.db

		3. If you want to use, I have also submitted above dirs with some
			test files.

		4. I kept the amfsctl user level code at path fs/amfs/amfsctl/ which
			contains amfsctl.h, amfsctl.c and Makefile files.
			Following steps should be followed to build it:
			# make clean
			# make

			Similary, I have written the script "amfsctl.sh" which is at the
			path hw2-mgoyal/ which will directly clean and build the amfsctl.

DESCRIPTION:
		1. User Program:
			In the user program, it will take input from user like listing,
			adding new pattern or removing pattern, from the pattern.db
			And then it will invoke the ioctl system call depending upon the
			user input. It do various validation checks and returns an error
			with appropriate message if failure. The various checks are:

			a. Checks for valid options and returns an error for invalid options.
			b. checks if the user has given both add and remove option at the same
				time.
			c. It validates the mount point is proper or not.
			d. After all verification, it invokes ioctl system call to get list
				of pattern or add/remove new pattern.

		2. Kernel Program
			In the kernel level, amfs_unlocked_ioctl functions gets invoked on
			ioctl system call, and depending upon the request command it add/remove
			new pattern to/from the link list which is used for virus checking and
			to/from the pattern.db file and updates the version number of the file.
			If the request command is for display it copies the pattern list to the
			user buffer. It do checks various checks, like if the pattern to be added
			is already in the file or pattern to be removed is not present in the file.
			It checks for various zero length and maximum length of pattern.

		3. File System
			Upon mounting AMFS file system, it takes pattern.db file as parameter,
			it then parses the pattern file with new line separators and fill the
			link list with virus patterns. This link list is accessed across the
			whole file system by saving it to the super block of the file system.
			i.e, any file or dir under this mounted file system can be checked with
			this pattern list. The very first time pattern file extended attribute to 1,
			and after that when ever there is new pattern added or a existing pattern
			is removed its version will be updated when file system is unmounted and
			thereafter its previous version will be used on mounting. The pattern file
			version is also stored in the super block of the file sytem to avoid opening
			of the pattern file everytime to get the version.

			Below is the brief description of the important functions I have added
			or modified:

			--amfs.h:
				It declares various macros like ioctl request codes, pattern size,
				Extra credit, and extended attribute macros. It also declares structures
				to be used across file system like file system info structure, link list
				node structure.

			--main.c:
			 -> amfs_parse_pattern():
				This function parses the pattern file data into the linklist which
				will be saved in the file system's superblock to be accessed across
				whole file system. It checks whether the parsed string pattern is of
				zero length then skips.

			 -> amfs_file_stat():
				This function calculates the size of the pattern file which will be
				used to allocate memory.

			->  amfs_read_super():
				In this function, I read the pattern file upon mounting into the
				buffer, call the parse function to store the patterns into linklist.
				Saved the version number of file and link list to superblock of the
				file system. It do various validation checks on file and mount path.

			--file.c:
			 -> amfs_write_pattern_file():
				In this function, I am updating the pattern file whenever a new pattern
				is added or a existing pattern has been removed. Various checks have
				been done on pattern file, whether it is accessible or not, have write
				permission or not.

			 -> amfs_read():
				This function checks for virus pattern in the buf read from the file,
				first it checks if the file is alreay marked bad and its version is same
				as pattern file version then it will not return the -EPERM error and will
				not let to read the file. If the file is not marked bad or its version is
				different then it scans the buf and if virus found in the buf, it marks
				the file as bad and returns error, otherwise it returns the bytes read.

			 -> amfs_write():
				In this function, it checks for virus pattern in the buf to be write to
				the file, before writing it first checks if the file is alreay marked bad
				and its version is same as pattern file version then it will not return
				the -EPERM error and will not let to write the buf to the file. If the
				file is not marked bad or its version is different then it scans the buf
				and if virus found in the buf, it will NOT let the buf to write to the file
				and return -EPERM. As the buf is not written, it will not set the file's
				attribute as bad. Otherwise it calls the vfs_write to write the buf to file.

			 -> amfs_readdir() and amfs_filldir():
				In this function, it invokes callback function amfs_filldir which fills the
				lower files in the dir and returns them. In amfs_filldir it finds for
				lower files dentry and then checks whether it is marked bad and the version
				stored in it is same as pattern file version, then it is not emitted.

			 -> amfs_open() and amfs_file_release(): // extra credit func
				These functions will invoke the full scan of the file for virus while open
				and close for possible virus patterns.

			 -> amfs_file_scan(): // extra credit func
				This function is invoked from amfs_open or amfs_release, when the file
				is fully read on open or close. It checks for various cases, like whether
				if the file is already marked bad and its version different from
				pattern file version, then it should be scanned, Similarly if the file is
				already marked good but its version is different from the pattern file.
				Only then it will be scanned for virus. But if it is marked good or bad
				and its version is also same as pattern files, then it will not be checked.
				After checking all conditions, if the file needs to be scanned then
				amfs_file_check function is called otherwise it returns 0 as success.

			 -> amfs_file_check(): // extra credit func
				It reads the file into two buffers of PAGE_SIZE and then checks for the
				virus pattern across the buffer by concate them. If found virus it
				marks the file's extended attribute as bad otherwise good.It do various
				validation check on file, whether it is readable or not, checks if Zero
				length files, then no need to be scanned.

			--inode.c:
			 -> amfs_removexattr():
				This functions will not let to remove the EA attributes of the files
				it check the name of the attributes and if found will return error and
				not let vfs remove it.

			 -> amfs_rename():
				This function checks if the file is marked as bad and with same version
				then it will return error and not let vfs rename it.

			--lookup.c:
			 -> amfs_lookup():
				While looking up for file, in this function if the file looked for has
				attribute set marked bad and version same as pattern file version then it
				return error -ENOENT otherwise it returns the file dentry.

			--super.c:
				amfs_put_super():
				This functions is invoked before unmounting file sytems. In it version
				of pattern file is set before unmount so that it can be get on next mount.
				The memory allocated to linklist is deallocated and all the nodes are also
				freed. Any other memory which we have allocated for the file system is
				deallocated before unmount.

APPROACH:

EXTRA CREDIT:
		The extra credit code is wrapped in #ifdef--#endif. By default,
		I have commented out the #define EXTRA_CREDIT macro in amfs.h file,
		so it will not compiile. So to test the extra credit functionality,
		please uncomment the #define EXTRA_CREDIT macro in amfs.h header file.
		You need to "make" and insert and mount the file system again to check
		the functionality. I have implemented second part (On-open/close file
		scan, tri-state file status) of extra credit . So, it works well for
		amfs open and amfs close functions. It will scan only if the file attribute
		is set bad or good and version in file is different than the pattern.db
		version.
		I have checked the file data for using two PAGE_SIZE buffers and checking
		cross buffers, as it can be possible that the some part of virus pattern
		is in first buffer and some part in next buffer. So I checked across by
		taking two page size buffers and concat them and check for virus pattern
		from the known virus list.

FILES:
		1. amfs.h
		2. dentry.c
		3. file.c
		4. inode.c
		5. lookup.c
		6. main.c
		7. mmap.c
		8. super.c
		9. Kconfig
		10. Makefile (for amfs)
		11. amfsctl.h
		12. amfsctl.c
		13. Makefile (for amfsctl)
		14. README.HW2
		15. kernel.config
		16. amfs.sh
		17. amfsctl.sh

REFERENCES:
		ecryptfs code
		http://lxr.fsl.cs.sunysb.edu/linux/source/Documentation/ioctl/ioctl-number.txt
		https://www.kernel.org/pub/linux/kernel/people/rusty/kernel-locking/c326.html